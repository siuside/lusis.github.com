<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: monitoring sucks | blog dot lusis]]></title>
  <link href="http://lusis.github.com/blog/categories/monitoring-sucks/atom.xml" rel="self"/>
  <link href="http://lusis.github.com/"/>
  <updated>2016-04-18T01:20:56-04:00</updated>
  <id>http://lusis.github.com/</id>
  <author>
    <name><![CDATA[John E. Vincent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Monitoring Sucks - Watch your language]]></title>
    <link href="http://lusis.github.com/blog/2011/07/21/monitoring-sucks-watch-your-language/"/>
    <updated>2011-07-21T18:19:00-04:00</updated>
    <id>http://lusis.github.com/blog/2011/07/21/monitoring-sucks-watch-your-language</id>
    <content type="html"><![CDATA[<p><em>The following post is a recap of what was discussed in the 07/21/11 #monitoringsucks irc meeting</em></p>

<p>Before I get any further, I just want to thank everyone who attended,
either in virtual person or in spirit. There have been so many awesome
discussions going around this topic since we started. I am truly
priviledged to interact with each and every one of you. I struggle to
count myself a peer and I can only hope that I provide something in
return.</p>

<p>I mentioned to someone today that I’m literally sick of the current
landscape. I consider the current crop of monitoring solutions to be
technologically bankrupt. The situation is fairly untenable at this
point.</p>

<p>I just installed (after having a total loss of an existing Zenoss setup)
Nagios again. I’m not joking when I say that it depressed the everliving
hell out of me. The monitoring landscape simply has not kept up with
modern developments. At first it was mildly frustrating. Then it was
annoying. Now it’s actually a detriment.</p>

<p>Now that we have that out of the way….</p>

<!--more-->


<h1>Darmok and Jalad at Tanagra</h1>

<p>Communication is important. Like Picard and Dathon, we’ve been stranded
on a planet with shitty monitoring tools and we’re unable to communicate
about the invisibile threat of suck because we aren’t even speaking the
same language. I say event, you hear trigger, I mean data point. So the
first order of business was to try and agree on a set of terms. It was
decided that we would consider these things primitives. Here they are:</p>

<p>Please read through this before jumping to any conclusions. I promise it
will all become clear (as mud).</p>

<h2>metric</h2>

<p><em>a numeric or boolean data point</em></p>

<p>The data type of a metric was something of a sticking point. People were
getting hung up on data points being various things (a log message, a
“status”, a value). We needed something to describe the origin. The
single “thing” that triggered it all. That thing is a metric.</p>

<p>So why numeric <em>OR</em> boolean? It was pretty clear that many people
considered, and rightly so I would argue, that a state change is a
metric. A good example given by <a href="http://twitter.com/cwebber">Christopher Webber</a> is that of a BGP route going away.
Why is this a less valid data point than the amount of disk space in use
or the latency from one host to another? Frankly, it’s not.</p>

<p>But here’s where it gets fuzzy. What about a log message. Surely that’s a data point and thus a metric.</p>

<p>Yes and No. The <em>presence</em> of a log message is a data point. But it’s a boolean. The log message itself?</p>

<h2>context</h2>

<p><em>metadata about a metric</em></p>

<p>Now metadata itself is a loaded term but in this scope, the “human
readable” attributes are considered context. Going back to our log
example. The presence of the log message is a metric. The log message
itself is context. Here’s the thing. You want to know if there is an
error message in a log file. The type of error, the error message text?
That’s context for the metric to use in determining a course of action.</p>

<p>Plainly speaking, metrics are for machines. Context is for humans. This
leads us to….</p>

<h2>event</h2>

<p><em>metric combined with context</em></p>

<p>This is still up in the air but the general consensus was that this was
a passable definition. The biggest problem with a group of domain
experts is that they are frequently unable to accept semantic
approximation. Take the discussion of Erlang Spawned process:</p>

<ul>
<li>It’s sort of like a VM on a VM</li>
<li>NO IT’S NOT.</li>
<li><em>headdesk</em></li>
</ul>


<p>The fact is that an Erlang spawned process has shades of a virtual
machine is irrelevant to the domain expert. We found similar discussions
around what we would call the combination of a metric and its context.
But where do events come from?</p>

<h2>resource</h2>

<p><em>the source of a metric</em></p>

<p>Again, we could get into arguments around what a resource is. One thing
that was painfully obvious is that we’re all sick and tired of being
tied to the Host and Service model. It’s irrelevant. These constructs
are part “legacy” and part “presentation”.</p>

<p>Any modern monitoring thought needs to realize that metrics no longer
come from physical hosts or are service states. In the modern world,
we’re taking a holistic view of monitoring that includes not only bare
metal but business matters. The number of sales is a metric but it’s not
tied to a server. It’s tied to the business as a whole. The source of
your metrics is a resource. So now that we have this information - a
metric, its context and who generated it - what do we do? We take….</p>

<h2>action</h2>

<p><em>a response to a given metric</em></p>

<p>What response? It doesn’t MATTER. Remember that these are primitives.
The response is determined by components of your monitoring
infrastructure. Humans note the context. Graphite graphs it. Nagios
alerts on it. ESPER correlates it with other metrics. Don’t confuse
scope here. From this point on, whatever happens has is all decided on
by a given component. It’s all about perspective and aspects.</p>

<h1>Temba, his arms wide</h1>

<p>I’m sure through much of that, you were thinking “alerting! graphing!
correlation!”. Yes, that was pretty much what happened during the
meeting as well. Everyone has pretty much agreed (I think) at this point
that any new monitoring systems should be modular in nature. As <a href="http://twitter.com/obfuscurity">Jason
Dixon</a> put it - “Voltron”. No single
system that attempts to do everything will meet everyone’s needs.
However, with a common dictionary and open APIs you should be able to
build a system that DOES meet your needs. So what are those components?
Sadly this part is not as fleshed out. We simply ran out of time.
However we did come up with a few basics:</p>

<h2>Collection</h2>

<p><em>getting the metrics</em></p>

<p>It doesn’t matter if it’s push or pull. It doesn’t matter what the
transport is - async or point-to-point. Somehow, you have to get a
metric from a resource.</p>

<h2>Event Processing</h2>

<p><em>taking action</em></p>

<p>Extract the metric and resource from an event. Do something with it.
Maybe you send the metric to another component. Maybe you “present” it
or send it somewhere to be presented. Maybe you perform a change on a
resource (restarting a service). Essentially the decision engine.</p>

<h2>Presentation</h2>

<p>While you might be thinking of graphing here, that’s a type of
presentation. You know what else is presentation? An email alert. Stick
with me. I know what’s going through your head. No..not that…the other
thing.</p>

<h2>Analytics</h2>

<p>This is pretty much correlation. We didn’t get a REAL solid defintion
here but everyone was in agreement that some sort of analytics is a
distinct component.</p>

<h2>The “other” stuff</h2>

<p>As I said, we had to kind of cut “official” things short. There was
various discussion around Storage and Configuration. Storage I
personally can see as a distinct component but Configuration not so
much. Configuration is an aspect of a component but not a component
itself.</p>

<h2>Logical groupings</h2>

<p>Remember when I said I know what you’re thinking? This is what I think
it was.</p>

<p>You can look at the above items and from different angles they look
similar. I mean sending an email feels more like event processing than
presentation. You’d probably be right. By that token, drawing a point on
a graph is technically processing an event. The fact is many components
have a bit of a genetic bond. Not so much parent/child or sibling but
more like cousins. In all honesty, if I were building an event
processing component, I’d probably handle sending the email right there.
Why send it to another component? That makes perfect sense. Graphing?
Yeah I’ll let graphite handle that but I can do service restarts and
send emails. Maybe you have an intelligent graphing component that can
do complex correlation inband. That makes sense too.</p>

<p>I’m quite sure that we’ll have someone who writes a kickass event
processor that happens to send email. I’m cool with that. I just don’t
want to be bound to ONLY being able to send emails because that’s all
your decision system supports.</p>

<h1>Shaka, when the walls fell</h1>

<p>Speaking personally, I really feel like today’s discussion was VERY
productive. I know that you might not agree with everything here. Things
are always up for debate. The only thing I ask is that at some point,
we’re all willing to say “I know that this definition isn’t EXACTLY how
I would describe something but it’s close enough to work”.</p>

<p>So what are the next steps? I think we’ve got enough information and
consensus here for people to start moving forward with some things. One
exercise, inspired by something Matt Ray said, that we agreed would be
REALLY productive is to take an existing application and map what it
does to our primitives and components. Matt plans on doing that with
Zenoss since that’s what he knows best.</p>

<p>Let me give an example:</p>

<p>Out of the box, Nagios supports Hosts and Services which map pretty
cleanly to resources. It is does not only collection but event
processing and presentation. It not only supports metrics but also
context (Host down is the boolean metric. “Response timeout” is the
context. Through something like pnp4nagios, it can support different
presentations. It has very basic set of Analytic functionality.</p>

<p>Meanwhile Graphite is, in my mind, strictly presentation and deals only
with metrics. It does support both numeric and boolean metrics. It also
has basic resource functionality but it’s not hardwired. It doesn’t
really do event handling in the strict sense. Analytics is left to the
human mind. It certainly doesn’t support context.</p>

<p>I’d love to see more of these evaluations.</p>

<p>Also, I know there are tons of “words” that we didn’t cover - thresholds
for instance. While there wasn’t a total consensus, there was some
agreement that somethings were attributes of a component but not a
primitive itself. It was also accepted that components themselves would
be primitives. You correlation engine might aggregate (another word) a
group of metrics and generate an event. At that point, your correlation
engine is now a resource with its own metrics (25 errors) and context
(“number of errors across application servers exceeded acceptable
limits”) which could be then sent to an event processor.</p>

<p>That’s the beauty of the Voltron approach and not binding a resource to
a construct like a Host.</p>

<h1>Special note to the Aussies</h1>

<p>I’m very sorry that we couldn’t get everyone together. I’ve scheduled
another meeting where we can start from scratch just like this one, or
build on what was discussed already. I’m flexible and willing to wake up
at whatever time works best for you guys</p>

<p>Thanks again to everyone who attended. If you couldn’t be there, I hope
you can make the next one.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Monitoring Sucks]]></title>
    <link href="http://lusis.github.com/blog/2011/06/05/why-monitoring-sucks/"/>
    <updated>2011-06-05T19:30:00-04:00</updated>
    <id>http://lusis.github.com/blog/2011/06/05/why-monitoring-sucks</id>
    <content type="html"><![CDATA[<p><em>(and what we're doing about it)</em></p>

<p>About two weeks ago someone made a tweet. At this point, I don't
remember who said it but the gist was that "monitoring sucks". I
happened to be knee-deep in frustrating bullshit around that topic and
was currently evaluating the same effing tools I'd evaluated at every
other company over the past 10 years or so. So I did what seems to be
S.O.P for me these days. I started something.</p>

<!--more-->


<h1>But does monitoring REALLY suck?</h1>

<p>Heck no! Monitoring is AWESOME. Metrics are AWESOME. I love it. Here's
what I don't love: - Having my hands tied with the model of host and
service bindings. - Having to set up "fake" hosts just to group
arbitrary metrics together - Having to either collect metrics twice -
once for alerting and another for trending - Only being able to see my
metrics in 5 minute intervals - Having to chose between shitty interface
but great monitoring or shitty monitoring but great interface - Dealing
with a monitoring system that thinks <strong>IT</strong> is the system of truth for
my environment - Perl (I kid...sort of) - Not actually having any real
choices</p>

<p>Yes, yes I know:</p>

<blockquote><p>You can just combine Nagios + collectd + graphite + cacti +
pnp4nagios and you have everything you need!</p></blockquote>

<p>Seriously? Kiss my ass. I'm a huge fan of the Unix pipeline philosophy
but, christ, have you ever heard the phrase "antipattern"?</p>

<h1>So what the hell are you going to do about it?</h1>

<p>I'm going to let smart people be smart and do smart things.</p>

<p>Step one was getting everyone who had similar complaints together on
IRC. That went pretty damn well. Step two was creating a github repo.
Seriously. Step two should ALWAYS be "create a github repo". Step three?
Hell if I know.</p>

<p>Here's what I do know. There are plenty of frustrated system
administrators, developers, engineers, "devops" and everything under the
sun who don't want much. All they really want is for shit to work. When
shit breaks, they want to be notified. They want pretty graphs. They
want to see business metrics along side operational ones. They want to
have a 52-inch monitor in the office that everyone can look at and say:</p>

<blockquote><p>See that red dot? That's bad. Here's what was going on when we got
that red dot. Let's fix that shit and go get beers</p></blockquote>

<h1>About the "repo"</h1>

<p>So the plan I have in place for the repository is this. We don't really
need code. What we need is an easy way for people to contribute ideas.
The plan I have in place for this is partially underway. There's now a
<em>monitoringsucks</em> organization on Github. Pretty much anyone who is
willing to contribute can get added to the team. The idea is that, as
smart people think of smart shit, we can create new repository under
some unifying idea and put blog posts, submodules, reviews,
ideas..whatever into that repository so people have an easy place to go
get information. I'd like to assign someone per repository to be the
owner. We're all busy but this is something we're all highly interested
in. If we spread the work out and allow easy contribution, then we can
get some real content up there.</p>

<p>I also want to keep the repos as light and cacheable as possible. The
organization is under the github "free" plan right now and I'd like to
keep it that way.</p>

<h2>Blog Posts Repo</h2>

<p>This repo serves as a place to collect general information about blog
posts people come across. Think of it as hyper-local delicious in a
DVCS.</p>

<p>Currently, by virtue of the first commit, Michael Conigliaro is the
"owner". You can follow him on twitter and github as @mconigliaro</p>

<h2>IRC Logs Repo</h2>

<p>This repo is a log of any "scheduled" irc sessions. Personally, I don't
think we need a distinct #monitoringsucks channel but people want to
keep it around. The logs in this repo are not full logs. Just those from
when someone says "Hey smart people. Let's think of smart shit at this
date/time" on twitter.</p>

<p>Currently <strong>I</strong> appear to be the owner of this repo. I would love for
someone who can actually make the logs look good to take this over.</p>

<h2>Tools Repo</h2>

<p>This repo is really more of a "curation" repo. The plan is that each
directory is the name of some tool with two things it in:</p>

<ul>
<li>A README.md as a review of the tool</li>
<li>A submodule link to the tool's repo (where appropriate)</li>
</ul>


<p>Again, I think I'm running point on this one. Please note that the
submodule links APPEAR to have some sort of UI issue on github. Every
submodule appears to point to Dan DeLeo's 'critical' project.</p>

<h2>Metrics Catalog Repo</h2>

<p>This is our latest member and it already has an official manager! Jason
Dixon (@obfuscurity on github/twitter - jdixon on irc) suggested it so
he get's to run it ;) The idea here is that this will serves as a set of
best practices around what metrics you might want to collect and why.
I'm leaving the organization up to Jason but I suggested a
per-app/service/protocol directory.</p>

<h1>Wrap Up</h1>

<p>So that's where we are. Where it goes, I have no idea. I just want to
help where ever I can. If you have any ideas, hit me up on
twitter/irc/github/email and let me know. It might help to know that if
you suggest something, you'll probably be made the person reponsible for
it ;)</p>

<p><strong>Update!</strong></p>

<p>It was our good friend Sean Porter (@portertech on twitter), that we
have to thank for all of this ;)</p>

<p>  <a href="https://picasaweb.google.com/lh/photo/Zi1k9F_7lBKjcN8dtJlXXQ?feat=embedwebsite"><img src="https://lh5.googleusercontent.com/-O6mNvCvCPyU/TexPV1P9YaI/AAAAAAAAAWk/7ZQ8BkXUyn8/s144/monitoring-sucks.png" alt="image" /></a>
  From <a href="https://picasaweb.google.com/lusisjv/PublicPhotos?feat=embedwebsite">Public Photos</a></p>

<p><strong>Update (again)</strong></p>

<p>It was kindly pointed out that I never actually included a link to the
repositories. Here they are:</p>

<p><a href="https://github.com/monitoringsucks">https://github.com/monitoringsucks</a></p>
]]></content>
  </entry>
  
</feed>
