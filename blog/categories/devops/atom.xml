<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: devops | blog dot lusis]]></title>
  <link href="http://lusis.github.com/blog/categories/devops/atom.xml" rel="self"/>
  <link href="http://lusis.github.com/"/>
  <updated>2014-09-24T01:42:36-04:00</updated>
  <id>http://lusis.github.com/</id>
  <author>
    <name><![CDATA[John E. Vincent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DevOps - The title match]]></title>
    <link href="http://lusis.github.com/blog/2013/06/04/devops-the-title-match/"/>
    <updated>2013-06-04T21:38:00-04:00</updated>
    <id>http://lusis.github.com/blog/2013/06/04/devops-the-title-match</id>
    <content type="html"><![CDATA[<p>I've noticed an annoying trend recently. I was content to ignore it for a while but now it's getting almost stupid. That trend is the job title of "DevOps".</p>

<!-- more -->


<p>I came across an article tonight that confused the hell out of me. It was an interview. The outlet wasn't a technical one per se but it was a technical interview none the less.</p>

<p>This part is what confused me (<em>highlights mine</em>):</p>

<p><blockquote><p>To do this requires a well-integrated platform that is full of capabilities for the <strong>developer</strong>; contemplates the needs of <strong>DevOps</strong>; provides command, control and visibility for <strong>operations</strong>; and is ....</p></blockquote></p>

<p>To quote an internet-famous person:</p>

<p><strong>WAT</strong></p>

<h2>Stepping back</h2>

<p>I don't like the idea of <em>devops</em> as a job title in the first place. I don't like it as a role either. It makes no sense. You don't call someone an <em>agile</em> so why would you call them a <em>devop</em>?</p>

<p>My problem lies in the fact that it implies that there's something wrong with being a sysadmin, operations person, developer or whatnot. Not only that but the idea behind devops is the elimination of silos, not the creation of new ones.</p>

<p>I have, however, made a bit of peace with the fact that <em>devops</em> has become a replacement title of sorts for <em>sysadmin</em> or <em>developer</em>.</p>

<p>I get the problem domain. Companies want to be able to qualify the types of people they want. The phrase <em>devops</em> carries a certain meaning with it. People are trying to leverage that. In other cases, it's become a codeword for "generalist" or "technologist". And, yes, even in some cases it's become a code word for "doing both development and ops work"</p>

<h2>What does devops mean though</h2>

<p>Here's the secret. I'll tell you EXACTLY what devops means.</p>

<p>Devops means giving a shit about your job enough to not pass the buck. Devops means giving a shit about your job enough to want to learn all the parts and not just your little world.</p>

<p>Developers need to understand infrastructure. Operations people need to understand code. People need to fucking work with each other and not just occupy space next to each other.</p>

<p>I worked at a company several years ago. We created a dedicated devops team. The rationale was solid - the company had a monolithic idea of roles and titles. We also had a large group on both sides that were only interested in doing their little bit and going home. By creating this title/team, it was easier at a company level to justify them working on non-standard projects.</p>

<p>So a "devops" team was created. This was a small team of what essentially boiled down to "super sysadmins". We wrote puppet manifests, worked with the developers to automate build processes...shit like that.</p>

<p>What ended up happening was that the devops team was seen as elitist by the operations team, nosy and invasive by the developers and everyone just passed the blame on to them - "Devops did that. Not us"</p>

<h2>So back to that quote</h2>

<p>Having said all that, what about the quote?</p>

<p>This is indicative of the problem I described above. I think I've finally figured out the question I want to ask people who think this way:</p>

<p>If devops is a distinct role/title apart from development and operations, then what the fuck does a "devop" do?</p>

<p>Let's look at that quote again. It implies that:</p>

<ul>
<li>"command, control and visibility" is something developers have no need for</li>
<li>operations won't need the same capabilities as developers</li>
<li>There's a third group that has an entirely different set of needs</li>
</ul>


<p>What is that third group? What possible aspect outside of development and operations of the IT needs of a company do those two groups not think affects them in some way and thus have a vested interest in being involved? <em>(Yes I'm aware companies have dbas, security and what not - those are shitty silos too)</em></p>

<p>This topic comes up all the time on various mailing lists and it never seems to really reach any sort of consensus. So I'm asking you. If a "devops" is something different than someone in operations or development, someone different than a sysadmin or developer....</p>

<p>What the fuck is it?</p>

<h2>Disclaimer</h2>

<p>This post was writting on an airplane with an annoying passenger in front of me, quite a bit of rum in me and a lack of sleep. I'm guessing it really doesn't look any different than any other post though does it?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[It sucks to be right]]></title>
    <link href="http://lusis.github.com/blog/2012/03/20/it-sucks-to-be-right/"/>
    <updated>2012-03-20T09:00:00-04:00</updated>
    <id>http://lusis.github.com/blog/2012/03/20/it-sucks-to-be-right</id>
    <content type="html"><![CDATA[<p>So it looks like Adrian Cockcroft finally spilled the beans on <a href="http://perfcap.blogspot.com/2012/03/ops-devops-and-noops-at-netflix.html">Netflix (no)Operations</a> and sadly it reads like I expected.</p>

<!-- more -->


<h1>Netflix still does operations</h1>

<p>Regardless of what words Adrian uses, Netflix still does operations. <a href="http://twitter.com/allspaw">John Allspaw</a> summed it up pretty well in this tweet:</p>

<p><img src="http://i.imgur.com/OW0kh.png" alt="Imgur" /></p>

<p>and here are the things, he mentions:</p>

<ul>
<li>Metrics collection</li>
<li>PaaS/IaaS evaluation/investigation</li>
<li>Automation (auto-build, auto-recovery)</li>
<li>Fault tolerance</li>
<li>Availability</li>
<li>Monitoring</li>
<li>Performance</li>
<li>Capex and Opex forecasting</li>
<li>Outage response</li>
</ul>


<h1>So what does Adrian get wrong?</h1>

<p>These are just a few things that jumped out at me (and annoyed me)</p>

<p><blockquote><p>However, there are teams at Netflix that do traditional Operations, and teams that do DevOps as well.</p></blockquote></p>

<p>Ops is ops is ops. No matter what you call it, Operations is operations.</p>

<p><blockquote><p>Notice that we didn't use the typical DevOps tools Puppet or Chef to create builds at runtime</p></blockquote></p>

<p>There's no such thing as a "DevOps tool". People were using CFengine, Puppet and Chef long before DevOps was even a term. These are configuration management tools. In fact Adrian has even said they use Puppet in their legacy datacenter:</p>

<p><img src="http://i.imgur.com/RJIX1.png" alt="Imgur" /></p>

<p>yet he seems to make the distinction between the ops guys there and the "devops" guys (whatever those are).</p>

<p><blockquote><p>There is no ops organization involved in running our cloud...</p></blockquote></p>

<p>Just because you outsourced it, doesn't mean it doesn't exist. Oh and it's not your cloud. It's Amazon's.</p>

<h1>Reading between the lines</h1>

<p>Actually this doesn't take much reading between the lines. It's out there in plain sight:</p>

<p><blockquote><p>In reality we had the usual complaints about how long it took to get new capacity, the lack of consistency across supposedly identical systems, and failures in Oracle, in the SAN and the networks, that took the site down too often for too long.</p></blockquote></p>

<p><blockquote><p>We tried bringing in new ops managers, and new engineers, but they were always overwhelmed by the fire fighting needed to keep the current systems running.</p></blockquote></p>

<p><blockquote><p>This is largely because the people making decisions are development managers, who have been burned repeatedly by configuration bugs in systems that were supposed to be identical.</p></blockquote></p>

<p><blockquote><p>The developers used to spend hours a week in meetings with Ops discussing what they needed, figuring out capacity forecasts and writing tickets to request changes for the datacenter.</p></blockquote></p>

<p><blockquote><p>There is no ops organization involved in running our cloud, no need for the developers to interact with ops people to get things done, and less time spent actually doing ops tasks than developers would spend explaining what needed to be done to someone else.</p></blockquote></p>

<p>I'm glad to see this spelled out in such detail. This is what I've been telling people semi-privately for a while now. Because Netflix had such a terrible experience with its operations team, they went to the opposite extreme and disintermediated them.</p>

<p>Imagine you were scared as a kid by a clown. Now imagine you have kids of your own. You hate clowns. You had a bad experience with clowns. But it's your kid's birthday party so here you are making baloon animals, telling jokes and doing silly things to entertain the kids.</p>

<p>Just because you aren't wearing makeup doesn't make you any less of a clown. You're doing clown shit. Through the eyes of the kids, you're a clown. Deal with it.</p>

<p>Netflix is still doing operations. What should be telling and frightening to operations teams everywhere is this:</p>

<p>The Netflix response to poorly run operations that can't service the business is going to become the norm and not the exception. Evolve or die.</p>

<p>Please note that I don't lay all the blame on the Netflix operations team. I would love to hear the flipside of this story from someone who was there originally when the streaming initiative started. It would probably be full of stories we've heard before - no resources, misalignment of incentives and a whole host of others.</p>

<p>Adrian, thank you for writing the blog post. I hope it serves as a warning to those who come. Hopefully someday you'll be able to see a clown again and not get scared ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why you should stop fighting distro vendors]]></title>
    <link href="http://lusis.github.com/blog/2012/03/16/why-you-should-stop-fighting-distro-vendors/"/>
    <updated>2012-03-16T14:37:00-04:00</updated>
    <id>http://lusis.github.com/blog/2012/03/16/why-you-should-stop-fighting-distro-vendors</id>
    <content type="html"><![CDATA[<p>Recently I saw a tweet from <a href="https://twitter.com/#!/kohsukekawa/status/180717301795008512">Kohsuke Kawaguchi</a> that really got me frustrated.</p>

<!-- more -->


<p>I've addressed this topic a bit before <a href="http://lusislog.blogspot.com/2010/09/distributions-and-dynamic-languages.html">here</a>. At the time it was addressing specifically dynamic languages. However the post that Kohsuke wrote (and the post that inspired it) have led me to a new line attitude.</p>

<p><strong>Don't bother trying to get your packages into upstream vendor distros</strong></p>

<h1>Wait. What? Let's step back a sec</h1>

<p>Let me clarify something first. System packages are a good thing. The hassle has always been with BUILDING those packages. It was simply easier to build the software on the machine and install to <code>/usr/local/</code> than to try and express anything more than the most moderately simple application in RPM or DEB build scripts:</p>

<ul>
<li>If what you are packaging has dependencies not shipped with the OS, now you've got to package those</li>
<li>If your dependency conflicts with a vendor-shipped version, you're screwed.</li>
<li>If your dependency is a language runtime, give up.</li>
<li>If your dependency is a specific version of python, just go into another line of work.</li>
<li>If it's a distro LTS release, just don't bother</li>
</ul>


<h1>Ahh but we can work around this!</h1>

<p>Yes, you're right. We now have tools like <a href="https://github.com/jordansissel/fpm">fpm</a> that take the pain out of it! Maven has had plugins that generate rpms and debs for you for a while now. Things are looking up! Let's just use those tools.</p>

<p>So now you think, I'll just get these things submitted to Debian....</p>

<p><strong>KABLOCK</strong></p>

<p>I could rant a bit about Debian's packaging policy but it's addressed in the posts above. So maybe the Fedora people are more flexible?</p>

<p><img src="http://i.imgur.com/px5ug.png" alt="Imgur" /></p>

<p><strong>WAT</strong></p>

<p>So here we have the two major distros that won't even consider your package unless you give the end-user the "freedom" to make your application unusable. Essentially you are told if you want your package to be included in upstream then you have to make sure they can swap out <code>libfunkytown.so.23</code> with <code>libfunkytown.so.1</code>.</p>

<p>But maybe your application doesn't work on that version. So maybe you think, I'll just vendor ALL the things and shove it into <code>/opt</code> or <code>/usr/local</code>? Yeah that doesn't fly either (for various reasons).</p>

<p>The point is that you'll probably never be able to get your package included upstream because you'll never be able to jump through the hoops to do it.</p>

<h1>So stop trying</h1>

<p>I know, I know. It would be awesome if you could tell users to just <code>yum install kickass</code> or <code>apt-get install kickass</code> but it's not worth it for several reasons as enumerated above.</p>

<p>Distributions are not your friend. One could argue that its not thier job to be your friend. I would even agree with that argument. The distros have (or at least SHOULD have) an allegience to their user base. My argument is that position is directly opposed to your needs as a software provider.</p>

<h2>Things you should not do</h2>

<ul>
<li>Waste your time trying to ensure that your software works on some busted as old version of libfunkytown that won't get upgrade for 7 years.</li>
<li>Waste your time breaking your application into 436 interdependent subpackages just to please upstream</li>
<li>Ignore the prexisting dependency management ecosystem of your language of choice (especially if it works)</li>
</ul>


<h2>Things you should do</h2>

<ul>
<li>Use your language's preexisting dependency management system to collect all your dependencies</li>
<li>Rebar, bundle, virtualenv, mavenize, fatjar whatever ALL the dependencies</li>
<li>Use FPM or some homegrown script to create a monolithic rpm or deb of your codebase that installs to <code>/opt/appname</code></li>
<li>Make these packages available to your users on your download site</li>
<li>Alternately, create a repo and repo config file they can use to stay up to date</li>
</ul>


<p>You will be happy. Your users will be happy. The distros can go lick themselves. We have reached something of a crossroads. As I argued in the previous post, the concept of a distribution is becoming somewhat irrelevant. Distros are more concerned about politics and making statements and broken concepts like software that doesn't need upgrading for 7 years (or even 2 years) than providing a framework and ecosystem that encourages developers to target software at it.</p>

<p>If someone takes up the noble cause of trying to get your software included upstream, I would go so far as to make it plainly clear on whatever communication you have that you simply cannot support an unofficial repackaging of your software. Be polite. These are still your potential userbase. Simply state that those were not created by you and that the official packages are here.</p>

<h1>A case in point</h1>

<p>What I'm suggesting you do is not unheard of and honestly is the most tenable long term path for your users. Look at projects like Vagrant, Chef and Puppet among others. All of these tools are "owning their availability" the right way and are arguably providing better end user experiences than getting included in upstream could provide. In fact the experience of official packaging is above and beyond trying to do it yourself. As it should be.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Graphs in operations]]></title>
    <link href="http://lusis.github.com/blog/2012/03/06/graphs-in-operations/"/>
    <updated>2012-03-06T23:59:00-05:00</updated>
    <id>http://lusis.github.com/blog/2012/03/06/graphs-in-operations</id>
    <content type="html"><![CDATA[<p>So anyone who knows me knows I spend an inordinate amount of time bitching about Maven. I don't know if it's the type of companies I end up working for or what but I always seem to find myself ass-deep in Maven.</p>

<!-- more -->


<p><em>please note that I'm drifiting into deeply unfamiliar territory for me. Someone once told me the best way to learn about something is to write about it. Keep that in mind when making comments?</em></p>

<p>One of the more interesting parts of maven is the dependency graph and concepts like transitive and (god forbid) circular dependencies. These problems aren't exlcusive to java, mind you. See bundler for Ruby.</p>

<h2>A bit on graphs</h2>

<p>Graph is a fairly overloaded term. In the context of this discussion I'm talking about graph theory (insofar as I can grok it). Specifically I want to talk about it in the context of IT operations.</p>

<p>Graphs are nothing "new". Programmers have binary trees. Network geeks have OSPF. Puppet and Git are fans of the DAG (directed acyclic graph). These are all rooted in the same place no? You have nodes and edges. It's math all the way down. Unfortunately I suck at math.</p>

<p>If the topic interests you at all, wikipedia has a good couple of articles worth reading. Seeing as I'm far from a domain expert, I can't vouch for the quality:</p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Graph_theory">Graph Theory</a></li>
<li><a href="http://en.wikipedia.org/wiki/Graph_(mathematics">Graph (mathematics)</a>)</li>
<li><a href="http://en.wikipedia.org/wiki/Glossary_of_graph_theory">Glossary of graph theory</a></li>
</ul>


<h1>How can graphs apply to IT operations</h1>

<p>I've said for a while now that I feel like there's something fuzzy on the horizon that I can't make quite make out and it involves orchestration and graphs. I'm still not clear on how to express it but I'll try.</p>

<p>Anyone who has ever used Puppet or Git has dabbled in graphs even if they don't know it. However my interest in graphs in operations relates to the infrastructure as a whole. James Turnbull expressed it very well last year in Mt. View when discussion orchestration. Obviously this is a topic near and dear to my heart.</p>

<p>Right now much of orchestration is in the embryonic stages. We define relationships manually. We register watches on znodes. We define hard links between components in a stack. X depends on Y depends on Z. We're not really being smart about it. If someone disagrees, I would LOVE to see a tool addressing the space.</p>

<p>Justin Sheehy did an awesome high level presentation on distributed systems, databases and the like at Velocity last year. While the talk was good, one thing that stuck out with me was his usage of the Riak logo:</p>

<p><img src="https://assets.github.com/img/b4d183fe3181209da593ed5c6bf0f4c805ab2a62/687474703a2f2f6769746875622d696d616765732e73332e616d617a6f6e6177732e636f6d2f626c6f672f323031302f7269616b2d6c6f676f2e706e67" alt="Riak Logo" /></p>

<p>During the presentation he would zoom out of the logo and replace it with the same logo. It expressed the idea of moving up the stack. Macro versus micro. I have the same feeling about where orchestration is going.</p>

<h2>Express yourself</h2>

<p>Currently we do a great job (and have the tools) to express relationships and dependencies at the node level:</p>

<ul>
<li>webapp needs container</li>
<li>container needs java</li>
<li>container needs system user</li>
</ul>


<p>Going a level higher, we even have some limited ability to express relationships between nodes:</p>

<ul>
<li>Load balancer needs app servers</li>
<li>App server needs database</li>
</ul>


<p>We're not quite as good at this part yet but people have workarounds. I use Noah for this. enStratus also handles this very well.</p>

<p>But we're still defining those relationships manually.</p>

<p>When we get to this next level up, things get REALLY fuzzy. As people start to (re)discover SOA, we now have stacks that have dependencies on other stacks. Currently we use tools like Zookeeper to broker that relationship. But we still have to explcitly manage it.</p>

<p>The level of coupling here isn't the problem. You can mitigate failure in one stack as it relates to another stack. Fail fast and fall back to sane/safe defaults. Read any article about how Netflix architects to get an idea.</p>

<h1>What's missing?</h1>

<p>What I feel like we're missing is a way to express those relationships and then trigger on them all the way up and down the chain as needed. We're starting to get into graph territory here.</p>

<p>We must we be able to express and act on changes at the micro level (<em>I changed a config, I must restart nginx</em>) and even at the intranode level (<em>something changed in my app tier, need to tell my load balancer</em>) but now we need a way handle it at that macro level. Not only do we need a way to handle it but we must also be able to calculate what is impacted by that change.</p>

<ul>
<li>If I have this internode change, does it affect the intranode relationship?</li>
<li>If I have an intranode change, does it affect the intrastack relationship?</li>
</ul>


<p>It seems to me that a graph of SOME kind is the best way to express this. I just can't quite make it out. Does current graph technology even handle that subgraph relationship? Excuse the pun but where do we draw the line? Are there multiple lines?</p>

<p>Maybe this isn't an issue. Maybe through resilience engineering we simply keep that "intrastack" dependency as loose as possible so that we don't have this problem?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load balancing Logstash with Redis]]></title>
    <link href="http://lusis.github.com/blog/2012/01/31/load-balancing-logstash-with-redis/"/>
    <updated>2012-01-31T23:24:00-05:00</updated>
    <id>http://lusis.github.com/blog/2012/01/31/load-balancing-logstash-with-redis</id>
    <content type="html"><![CDATA[<p>After yesterday's post about load balancing logstash with AMQP and RabbitMQ, I got to thinking that it might be useful to show a smilar pattern with other inputs and outputs.
To me this, is the crux of what makes Logstash so awesome. Someone asked me to describe Logstash in one sentence. The best I could come up with was:</p>

<p><blockquote><p>Logstash is a unix pipe on steroids</p></blockquote></p>

<p>I hope this post helps you understand what I meant by that</p>

<!-- more -->


<h1>Revisiting our requirements and pattern</h1>

<p>If you recall from the post <a href="http://goo.gl/vWyCH">yesterday</a>, we had the following 'requirements':</p>

<ul>
<li>No lost messages in transit/due to inputs or outputs.</li>
<li>Shipper only configuration on the source</li>
<li>Worker based filtering model</li>
<li>No duplicate messages due to transit mediums (i.e. fanout is inappropriate as all indexers would see the same message)</li>
</ul>


<h2>EDIT</h2>

<p>Originally our list stated the requirements as <em>No lost messages</em> and <em>No duplicate messages</em>. I've amended those with a slight modification to closer reflect the original intent. Please see <a href="http://blog.lusis.org/blog/2012/01/31/load-balancing-logstash-with-amqp/#comment-426175086">comment from Jelle Smet here</a> for details. Thanks Jelle!</p>

<p>Our design looked something like this:</p>

<p><a href="/images/posts/load-balancing-logstash-with-amqp/gliffy-overview.png"><img src="/images/posts/load-balancing-logstash-with-amqp/gliffy-overview.png" alt="gliffy-overview.png" /></a></p>

<p>One of the reasons that post was so long was that AMQP is a complicated beast. There was quite a bit of dense frontloading I had to do to cover AMQP before we got to the meat.
We're going to take that same example, and swap out RabbitMQ for something a bit simpler and achieve the same results.</p>

<h1>Quick background on Redis</h1>

<p><a href="http://redis.io">Redis</a> is commonly lumped in with a group of data storage technologies called NoSQL. Its name is short for "REmoteDIctionaryServer". It typically falls into the "key/value" family of NoSQL.
Several things set Redis apart from most key/value systems however:</p>

<ul>
<li>"data types" as values</li>
<li>native operations on those data types</li>
<li>atomic operations</li>
<li>built-in PUB/SUB subsystem</li>
<li>No external dependencies</li>
</ul>


<h2>Data types</h2>

<p>I'm not going to go into too much detail about the data types except to list them and highlight the one we'll be leveraging. You can read more about them <a href="http://redis.io/topics/data-types">here</a></p>

<ul>
<li>Strings</li>
<li>Lists*</li>
<li>Sets</li>
<li>Hashes</li>
<li>Sorted Sets</li>
</ul>


<h3>How Logstash uses Redis</h3>

<p>Looking back at our AMQP example, we note three distinct exchange types. These are mapped to the following functionality in Redis (and Logstash <code>data_type</code> config for reference):</p>

<p><a href="/images/posts/load-balancing-logstash-with-redis/mapping-table.png"><img src="/images/posts/load-balancing-logstash-with-redis/mapping-table.png" alt="mapping-table.png" /></a></p>

<p>This is a somewhat over simplified list. In the case of a message producer, mimicing <code>direct</code> exchanges is done by writing to a Redis <code>list</code> while consumption of that is done via the Redis command <code>BLPOP</code><a href="http://redis.io/commands/blpop">*</a>. However mimicing the <code>fanout</code> and <code>topic</code> functionality is done strictly with the commands <code>PUBLISH</code><a href="http://redis.io/commands/publish">*</a>, <code>SUBSCRIBE</code><a href="http://redis.io/commands/subscribe">*</a> and <code>PSUBSCRIBE</code><a href="http://redis.io/commands/psubscribe">*</a>. It's worth reading each of those for a better understanding.</p>

<p>Oddly enough, the use of Redis as a messaging bus is something of a side effect. Redis supported lists that are auto-sorted by insert order. The <code>POP</code> command variants allowed single transaction get and remove of the data. It just fit the use case.</p>

<h1>The configs</h1>

<p>As with our previous example, we're going to show the configs needed on each side and explain them a little bit.</p>

<h2>Client-side/Producer</h2>

<p><code>
input { stdin { type =&gt; "producer"} }
output {
redis {
 host =&gt; 'localhost'
 data_type =&gt; 'list'
 key =&gt; 'logstash:redis'
}
}
</code></p>

<h3>data_type</h3>

<p>This is where we tell Logstash how to send the data to Redis. In the case, again, we're storing it in a list data type.</p>

<h3>key</h3>

<p>Unfortunately, key means different things (though with the same effect) depending on the <code>data_type</code> being used. In the case of a <code>list</code> this maps cleanly to the understanding of a <code>key</code> in a key/value system. It's common in Redis to namespace keys with a <code>:</code> though it's entirely unneccesary.</p>

<p>As an aside, when using <code>key</code> on <code>channel</code> data type, this behaves like the routing key in AMQP parlance with the exception of being able to use any separator you like (in other words, you can namespace with <code>.</code>,<code>:</code>,<code>::</code> whatever).</p>

<h2>Indexer-side/Consumer</h2>

<p><code>
input {
redis {
  host =&gt; 'localhost'
  data_type =&gt; 'list'
  key =&gt; 'logstash:redis'
  type =&gt; 'redis-input'
}
}
output {stdout {debug =&gt; true} }
</code></p>

<h3>data_type</h3>

<p>This needs to match up with the value from the output plugin. Again, in this example <code>list</code>.</p>

<h3>key</h3>

<p>In the case of a <code>list</code> this needs to map EXACTLY to the output plugin. Following on to our previous aside, for <code>data_type</code> values of <code>channel</code> input, the key must match exactly while <code>pattern_channel</code> can support wildcards. Redis PSUBSCRIBE wildcards actually much simpler than AMQP ones. You can use <code>*</code> at any point in the key name.</p>

<h1>Starting it all up</h1>

<p>We're going to simplify our original tests a little bit in the interest of brevity. Showing 2 producers and 2 consumers gives us the same benefit as showing four of each. Since we don't have the benefit of a pretty management interface, we're going to use the redis server debug information and the <code>redis-cli</code> application to allow us to see certain management information.</p>

<h2>redis-server</h2>

<p>Start the server with the command <code>redis-server</code> I'm running this from homebrew but you literally build Redis on any machine that has <code>make</code> and a compiler. That's all you need. You can even run it straight from the source directory:</p>

<p><a href="/images/posts/load-balancing-logstash-with-redis/redis-server.png"><img src="/images/posts/load-balancing-logstash-with-redis/redis-server.png" alt="redis-server.png" /></a></p>

<p>You'll notice that the redis server is periodically dumping some stats - number of connected clients and the amount of memory in use.</p>

<h2>Starting the logstash agents</h2>

<p>We're going to start two producers (redis output) and two consumers (redis input):</p>

<p><a href="/images/posts/load-balancing-logstash-with-redis/agents.png"><img src="/images/posts/load-balancing-logstash-with-redis/agents.png" alt="agents.png" /></a></p>

<p>Back in our redis-server window, you should now see two connected clients in the periodic status messages. Why not four? Because the producers don't have a persistent connection to Redis. Only the consumers do (via BLPOP):</p>

<p><a href="/images/posts/load-balancing-logstash-with-redis/two-clients.png"><img src="/images/posts/load-balancing-logstash-with-redis/two-clients.png" alt="two-clients.png" /></a></p>

<h1>Testing message flow</h1>

<p>As with our previous post, we're going to alternate messages between the two producers. In the first producer, we'll type <code>window 1</code> and in the second <code>window 2</code>. You'll see the consumers pick up the messages:</p>

<p><a href="/images/posts/load-balancing-logstash-with-redis/delivery.png"><img src="/images/posts/load-balancing-logstash-with-redis/delivery.png" alt="delivery.png" /></a></p>

<p>If you look over in the redis-server window, you'll also see that our client count went up to four. If we were to leave these clients alone, eventually it would drop back down to two.</p>

<p><a href="/images/posts/load-balancing-logstash-with-redis/new-connections.png"><img src="/images/posts/load-balancing-logstash-with-redis/new-connections.png" alt="new-connections.png" /></a></p>

<p>Feel free to run the tests a few times and get a feel for message flow.</p>

<h2>Offline consumers</h2>

<p>This is all well and good but as with the previous example, we want to test how this configuration handles the case of consumers going offline. Shut down the two indexer configs and let's verify. To do this, we're going to also open up a new window and run the <code>redis-cli</code> app. Technically, you don't even need that. You can telnet to the redis port and just run these commands yourself. We're going to use the <code>LLEN</code> command to get the size of our "backlog".</p>

<p>In the producer windows, type a few messages. Alternate between producers for maximum effect. Then go over to the <code>redis-cli</code> window and type <code>LLEN logstash:redis</code>. You should see something like the following (obviously varied by how many messages you sent):</p>

<p><a href="/images/posts/load-balancing-logstash-with-redis/llen.png"><img src="/images/posts/load-balancing-logstash-with-redis/llen.png" alt="llen.png" /></a></p>

<p>You'll also notice in the redis server window that the amount of memory in use went up slightly.</p>

<p>Now let's start our consumers back up and ensure they drain (and in insert order):</p>

<p><a href="/images/posts/load-balancing-logstash-with-redis/drain.png"><img src="/images/posts/load-balancing-logstash-with-redis/drain.png" alt="drain.png" /></a></p>

<p>Looks good to me!</p>

<h1>Persistence</h1>

<p>You might have noticed I didn't address disk-based persistence at all. This was intentional. Redis is primarily a memory-based store. However it does have support for a few different ways of persisting to disk - RDB and AOF. I'm not going to go into too much detail on those. The Redis documentation does a good job of explaining the pros and cons of each. You can read that <a href="http://redis.io/topics/persistence">here</a>.</p>

<h1>Wrap up</h1>

<p>One thing that's important to note is that Redis is pretty damn fast. The limitation for Redis is essentially memory. However if speed isn't your primary concern, there's an interesting alpha project called <a href="http://inaka.github.com/edis">edis</a> worth investigating. It is a port of Redis to Erlang. Its primary goal is better persistence for Redis. For this post I also tested Logstash against edis and I'm happy to say it works:</p>

<p><a href="/images/posts/load-balancing-logstash-with-redis/edis.png"><img src="/images/posts/load-balancing-logstash-with-redis/edis.png" alt="edis.png" /></a></p>

<p>I hope to do further testing with it in the future in a multinode setup.</p>

<h2>Part three</h2>

<p>I'm also working on a part three in this "series". The last configuration I'd like to show is doing this same setup but using <a href="http://zeromq.org">0mq</a> as the bus. This is going to be especially challenging since our 0mq support is curretly 'alpha'-ish quality. Beyond that, I plan on doing a similar series using pub/sub patterns. If you're enjoying these posts, please comment and let me know!</p>
]]></content>
  </entry>
  
</feed>
